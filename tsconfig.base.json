{
  "compilerOptions": {
    "baseUrl": ".",
    "rootDir": ".",
    "paths": {
    },
    // Enables all strict type checking options.
    "strict": true,
    // for now, don't use unknown in catch
    "useUnknownInCatchVariables": false,
    // enabled to point out not supported features when emitting in an isolated module environment
    "isolatedModules": true,
    // ensures every non-declaration file is treated as a module
    "moduleDetection": "force",
    // enabled for improved performance
    "incremental": false,
    // Do not check d.ts files ts ships by default
    "skipDefaultLibCheck": true,
    // Do not check d.ts files by default
    "skipLibCheck": true,
    // enables "core language features"
    "lib": [
      "es5",
      // includes support for browser APIs
      "dom",
      "DOM.Iterable"
    ],
    // Node 8 should support everything output by esnext, we override this
    // in webpack with loader-level compiler options
    "target": "es5",
    // Use commonjs for node, overridden in webpack to keep import statements
    // to maintain support for things like `await import()`
    "module": "commonjs",
    // Allows default imports from modules with no default export. This does not affect code emit, just type checking.
    // We have to enable this option explicitly since `esModuleInterop` doesn't enable it automatically when ES2015 or
    // ESNext module format is used.
    "allowSyntheticDefaultImports": true,

    "declarationMap": false,
    "declaration": true,
    
    // Several packages use .js files to provide types without requiring transpilation. In order for TS to support this
    // regardless of where the pacakge is imported, we need to enable `allowJs` globally. In specific packages we might
    // want to disable parsing of JS files, in which case `allowJs` should be set to `false` locally. These packages will
    // not be able to import packages which include JS code, or import packages which depend on JS code.
    "allowJs": true,
    // Emits __importStar and __importDefault helpers for runtime babel ecosystem compatibility.
    "esModuleInterop": true,
    // Resolve modules in the same way as Node.js. Aka make `require` works the
    // same in TypeScript as it does in Node.js.
    "moduleResolution": "node",
    // "resolveJsonModule" allows for importing, extracting types from and generating .json files.
    "resolveJsonModule": true,
    // Disallow inconsistently-cased references to the same file.
    "forceConsistentCasingInFileNames": false,
    // Forbid unused local variables as the rule was deprecated by ts-lint
    "noUnusedLocals": true,
    // Provide full support for iterables in for..of, spread and destructuring when targeting ES5 or ES3.
    "downlevelIteration": true,
    // import tslib helpers rather than inlining helpers for iteration or spreading, for instance
    "importHelpers": true,

    // Allow usage of experimental decorators
    "experimentalDecorators": false,
    // Emits decorators metadata
    "emitDecoratorMetadata": false,
    // adding global typings
    "types": [
      "node",
      "jest"
    ]
  }
}
